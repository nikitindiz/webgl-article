WebGL width of Line into the Windows browsers

Few words before we start…
It’s my first article in English, my first article on medium.com and my first article about WebGL and ThreeJS

I hope readers know ThreeJS a little bit.
Of course it might look like “reinventing the wheel” :) but why not ;)

What happened?
Few of days ago I'm faced with the problem. How to draw custom width line via WebGL at MS Windows browsers. Currently Windows browsers support 1px line width only (the reason is DirectX Angle Layer).

You can check it out yourself here.

If you take a pause and try to search over the Internet, you'll find one of following solutions:
- Using the command line parameter for Chrome: --use-gl=desktop
This will force Chrome to use OpenGL instead of DirectX
Not a common solution.

- Simulation of the line width by creating triangles. You can find more details here
A more common solution, but it’s not my way :D

- Also you can find a great article by MATT DESLAURIERS on his library webgl-lines: "Drawing Lines is Hard"
Good, but it’s not my choice

My solution
For my solution I use THREE.BufferGeometry, THREE.Points and illusion :)
I guess we have some BufferGeometry (call it base).
The common algorithm:
- Get the position attribute from base.
- Walk through all the points into the position attribute.
- On each step, calculate the number of new points between the current point and the previous point depending on the distance between selected points and the size of the particle.
- Generate new points and add them into the result array.
- Make new THREE.BufferGeometry and add to it the position attribute based on the generated positions array.
In fact, the following method does everything :)

Let’s look at an example

You can see it looks quite similar to the THREE.Line, but if you try to make double click then you’ll get a different result.

The trick is to change the size of the particle.

In order to calculate an optimal number of points into the geometry, we need to find the optimal blending ratio of particles. The ratio depends on particle image template. For the example I use the following image. I’ve found that the ratio of my image is 10/SIZE_OF_PARICLE, for another image it’ll be a different value. I know that it may look quite weird but I didn't find any better solution other than that.


What’s next?
First and foremost, we’ve almost solved the width problem. Why almost? Because it’s still a kludge or dirty hack. But now we have an opportunity to make interesting effects.

- Since we use THREE.ShaderMaterial, we are able to customize the whole drawing process. It allows us to make more advanced shader program.

- Also we are able to use different templates of particles.

- And we can make complicated structures:

I hope you'll find the article interesting and helpful.
Feel free to comment and ask questions.

P.S. If it’s a horrible stuff. Please, let me know about it. Maybe ThreeJS has tools for all that.

P.P.S Please let me know about mistakes in my text by DM on twitter.com/artzub or artzub[at]gmail.com
Best regards,
Artem Zubkov